module PgEventstore
  class SubscriptionsManager
    extend Forwardable

    # _@param_ `config`
    #
    # _@param_ `set_name`
    #
    # _@param_ `max_retries` — max number of retries of failed SubscriptionsSet
    #
    # _@param_ `retries_interval` — a delay between retries of failed SubscriptionsSet
    def initialize: (
        config: PgEventstore::Config,
        set_name: String,
        ?max_retries: Integer?,
        ?retries_interval: Integer?
      ) -> void

    # _@param_ `subscription_name` — subscription's name
    #
    # _@param_ `handler` — subscription's handler
    #
    # _@param_ `options` — request options
    #
    # _@param_ `middlewares` — provide a list of middleware names to override a config's middlewares
    #
    # _@param_ `pull_interval` — an interval in seconds to determine how often to query new events of the given subscription.
    #
    # _@param_ `max_retries` — max number of retries of failed Subscription
    #
    # _@param_ `retries_interval` — a delay between retries of failed Subscription
    #
    # _@param_ `restart_terminator` — a callable object which is invoked with PgEventstore::Subscription instance to determine whether restarts should be stopped(true - stops restarts, false - continues restarts)
    #
    # _@param_ `failed_subscription_notifier` - a callable object which is invoked with PgEventstore::Subscription instance and error instance after the related subscription died due to error and no longer can be automatically restarted due to max retries number reached. You can use this hook to send a notification about failed subscription.
    def subscribe: (
        String subscription_name,
        handler: _SubscriptionHandler,
        ?options: ::Hash[untyped, untyped],
        ?middlewares: ::Array[Symbol]?,
        ?pull_interval: Integer | Float,
        ?max_retries: Integer,
        ?retries_interval: Integer | Float,
        ?restart_terminator: _RestartTerminator?,
        ?failed_subscription_notifier: _FailedSubscriptionNotifier?,
        ?graceful_shutdown_timeout: Integer | Float,
      ) -> void

    def subscriptions: () -> ::Array[PgEventstore::Subscription]

    def subscriptions_set: () -> PgEventstore::SubscriptionsSet?

    # _@param_ `middlewares`
    #
    # _@param_ `handler`
    def create_raw_event_handler: (::Array[Symbol]? middlewares, _SubscriptionHandler handler) -> _RawEventHandler

    # _@param_ `middlewares`
    def select_middlewares: (?::Array[Symbol]? middlewares) -> ::Array[PgEventstore::Middleware]

    def start: () -> PgEventstore::BasicRunner?

    # Returns the value of attribute config.
    attr_accessor config: PgEventstore::Config
  end
end
