module PgEventstore
  class BasicRunner
    include Extensions::CallbacksExtension
    extend Forwardable

    @async_shutdown_time: Integer | Float
    @mutex: Thread::Mutex
    @recovery_strategies: Array[RunnerRecoveryStrategy]
    @run_interval: Integer | Float
    @runner: Thread?

    @state: RunnerState

    %a{rbs:test:skip} def initialize: (
        run_interval: (Integer | Float),
        async_shutdown_time: (Integer | Float),
        recovery_strategies: Array[RunnerRecoveryStrategy]
      ) -> void

    def async_recover: (StandardError error, RunnerRecoveryStrategy strategy, Integer current_runner_id)-> Thread

    def restore: -> untyped

    def start: () -> self

    def stop: () -> self

    def stop_async: () -> self

    def wait_for_finish: () -> self

    def state: () -> String

    # _@param_ `state`
    def within_state: (Symbol state) { () -> untyped } -> untyped?

    private

    def suitable_strategy: (StandardError error)-> RunnerRecoveryStrategy?

    def synchronize: () { () -> untyped } -> untyped

    def _start: () -> void

    def delegate_change_state_cbx: () -> void

    def change_state: (String state) -> void

    def recoverable: { () -> untyped } -> untyped

    def init_recovery_ripper: (Integer current_runner_id) -> untyped
  end
end
