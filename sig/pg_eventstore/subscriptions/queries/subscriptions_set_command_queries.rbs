module PgEventstore
  class SubscriptionsSetCommandQueries
    # _@param_ `connection`
    def initialize: (PgEventstore::Connection connection) -> void

    # _@param_ `subscriptions_set_id`
    #
    # _@param_ `command_name`
    #
    # _@param_ `data`
    def find_or_create_by: (subscriptions_set_id: Integer, command_name: String, data: ::Hash[untyped, untyped]) -> PgEventstore::SubscriptionFeederCommands::Base

    # _@param_ `subscriptions_set_id`
    #
    # _@param_ `command_name`
    def find_by: (subscriptions_set_id: Integer, command_name: String) -> PgEventstore::SubscriptionFeederCommands::Base?

    # _@param_ `subscriptions_set_id`
    #
    # _@param_ `command_name`
    #
    # _@param_ `data`
    def create: (subscriptions_set_id: Integer, command_name: String, data: ::Hash[untyped, untyped]) -> PgEventstore::SubscriptionFeederCommands::Base

    # _@param_ `subscriptions_set_id`
    def find_commands: (Integer? subscriptions_set_id) -> ::Array[PgEventstore::SubscriptionFeederCommands::Base]

    # _@param_ `id`
    def delete: (Integer id) -> void

    # _@param_ `hash`
    def deserialize: (::Hash[untyped, untyped] hash) -> PgEventstore::SubscriptionFeederCommands::Base

    def transaction_queries: () -> PgEventstore::TransactionQueries

    # Returns the value of attribute connection.
    attr_accessor connection: PgEventstore::Connection
  end
end
